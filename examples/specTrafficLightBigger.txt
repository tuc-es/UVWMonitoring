APs: a1 a2 b1 b2 c1 c2 d1 d2 m

# Two bits per traffic light, followed by button
# Red: (!a1 & !a2)
# Orange: (a1 & !a2)
# Green: (!a1 & a2)
# Yellow: (a1 & a2)

# After Red, Orange is next, followed by green
G ( (!a1 & !a2) -> ((!a1 & a2) R ( ((a1 & !a2) & ((!a1 & a2) R ((a1 & !a2) | (!a1 & a2))))  | (!a1 & !a2) | (!a1 & a2))))

G ( (!b1 & !b2) -> ((!b1 & b2) R ( ((b1 & !b2) & ((!b1 & b2) R ((b1 & !b2) | (!b1 & b2))))  | (!b1 & !b2) | (!b1 & b2))))

G ( (!c1 & !c2) -> ((!c1 & c2) R ( ((c1 & !c2) & ((!c1 & c2) R ((c1 & !c2) | (!c1 & c2))))  | (!c1 & !c2) | (!c1 & c2))))

G ( (!d1 & !d2) -> ((!d1 & d2) R ( ((d1 & !d2) & ((!d1 & d2) R ((d1 & !d2) | (!d1 & d2))))  | (!d1 & !d2) | (!d1 & d2))))


# From Green, we can only switch to yellow, to red. (No G->Y->G)
G ( (!a1 & a2) -> ((!a1 & !a2) R ( ((a1 & a2) & ((!a1 & !a2) R ((a1 & a2) | (!a1 & !a2))))  | (!a1 & a2) | (!a1 & !a2))))

G ( (!b1 & b2) -> ((!b1 & !b2) R ( ((b1 & b2) & ((!b1 & !b2) R ((b1 & b2) | (!b1 & !b2))))  | (!b1 & b2) | (!b1 & !b2))))

G ( (!c1 & c2) -> ((!c1 & !c2) R ( ((c1 & c2) & ((!c1 & !c2) R ((c1 & c2) | (!c1 & !c2))))  | (!c1 & c2) | (!c1 & !c2))))

G ( (!d1 & d2) -> ((!d1 & !d2) R ( ((d1 & d2) & ((!d1 & !d2) R ((d1 & d2) | (!d1 & !d2))))  | (!d1 & d2) | (!d1 & !d2))))

# Never two adjacent greens
G ( (!a1 & a2) -> !(!b1 & b2) )
G ( (!a1 & a2) -> !(!d1 & d2) )
G ( (!b1 & b2) -> !(!a1 & a2) )
G ( (!b1 & b2) -> !(!c1 & c2) )
G ( (!c1 & c2) -> !(!b1 & b2) )
G ( (!c1 & c2) -> !(!d1 & d2) )
G ( (!d1 & d2) -> !(!a1 & a2) )
G ( (!d1 & d2) -> !(!c1 & c2) )


# Never two adjacent oranges
G ( (a1 & !a2) -> !(b1 & !b2) )
G ( (a1 & !a2) -> !(d1 & !d2) )
G ( (b1 & !b2) -> !(a1 & !a2) )
G ( (b1 & !b2) -> !(c1 & !c2) )
G ( (c1 & !c2) -> !(b1 & !b2) )
G ( (c1 & !c2) -> !(d1 & !d2) )
G ( (d1 & !d2) -> !(a1 & !a2) )
G ( (d1 & !d2) -> !(c1 & !c2) )


# We never have that while the button is pressed, Green1 switches away.
G ( (m & (!a1 & a2)) -> X (!m | (!a1 & a2)) )


# Approximated chains for "(~m W ((a1 & ~a2 & X(~a1 & a2) ))"
~(~a1|a2) R (((~a1&m)|(a2&m)) -> X (false))
~(~a2|a1) R (((~a1&~a2&m)|(a1&a2&m)) -> X (false))
~(~a1|a2) R ((a1&~a2&m) -> X (~(~a2|a1) R (((~a2&~m)|(a1&~m)|(a1&~a2)) -> X (false))))
~(~a2|a1) R ((a1&~a2&m) -> X (~(~a2|a1) R (((~a2&~m)|(a1&~m)|(a1&~a2)) -> X (false))))



